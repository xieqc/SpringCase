<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:lang="http://www.springframework.org/schema/lang"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd"
		default-autowire="byName" default-lazy-init="true">

	<description>Spring公共配置</description>

	<context:annotation-config />
	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com.xie.springcase">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
	<!-- propertyConfigurer -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:*.properties</value>
			</list>
		</property>
	</bean>
	<!-- import dataSoucre config -->
	<bean id="dataSource_DBCP" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="${db.url}"/>
		<property name="username" value="${db.username}"/>
		<property name="password" value="${db.password}"/>
	</bean>
	<!-- c3p0 -->
	<bean id="dataSource_C3P0" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<!-- 指定连接数据库的驱动-->
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <!-- 指定连接数据库的URL-->
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <!-- 指定连接数据库的用户名-->
        <property name="user" value="${jdbc.user}"/>
        <!-- 指定连接数据库的密码-->
        <property name="password" value="${jdbc.password}"/>
        <!-- 指定连接池中保留的最大连接数. Default:15-->
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
        <!-- 指定连接池中保留的最小连接数-->
        <property name="minPoolSize" value="${jdbc.minPoolSize}"/>
        <!-- 指定连接池的初始化连接数  取值应在minPoolSize 与 maxPoolSize 之间.Default:3-->
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
        <!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0-->
        <property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3-->
        <property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>
        <!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。  
        但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0-->
        <property name="maxStatements" value="${jdbc.maxStatements}"/>
	</bean>
	<!-- Hikari Datasource -->
	<bean id="dataSource_HikariCP" class="com.zaxxer.hikari.HikariDataSource"  destroy-method="shutdown">
		<property name="driverClassName" value="${db.driverClass}" />   <!-- 无需指定，除非系统无法自动识别 -->
		<property name="jdbcUrl" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<!-- 连接只读数据库时配置为true， 保证安全 -->
		<property name="readOnly" value="false" />
		<!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
		<property name="connectionTimeout" value="30000" />
		<!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->
		<property name="idleTimeout" value="600000" />
		<!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL wait_timeout参数（show variables like '%timeout%';） -->
		<property name="maxLifetime" value="1800000" />
		<!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->
		<property name="maximumPoolSize" value="15" />
	</bean>
	<!-- hibernate start -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource_HikariCP"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.connection.release_mode">auto</prop>
				<prop key="hibernate.connection.autocommit">false</prop>
				<prop key="hibernate.autoReconnect">true</prop>
				<!-- Ecache -->
				<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
				<!-- hibernate结果集滚动 -->
				<prop key="jdbc.use_scrollable_resultset">false</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.xie.springcase.hibernate.entity</value>
			</list>
		</property>
	</bean>
	<!-- Hibernate end -->

	<!-- Mybatis start -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource_HikariCP" />
		<property name="configLocation" value="classpath:sqlMapConfig.xml"></property>
		<property name="mapperLocations" value="classpath:mybatis/mapper/**/*Mapper.xml"></property>
	</bean>
	<!-- 配置SQLSession模板 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!-- Mybatis end -->

	<!-- JPA start -->
	<bean id="persistenceProvider" class="org.hibernate.ejb.HibernatePersistence" /><!-- 用于指定持久化实现厂商类 -->
	<bean id="jpaDialect" class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" /><!-- 用于指定一些高级特性 -->
	<bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"><!-- 用于设置JPA实现厂商的特定属性 -->
        <property name="showSql" value="true"/>
        <property name="generateDdl" value="true"/>
        <property name="database" value="MYSQL"/>
    </bean>
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource_HikariCP"/>
        <property name="persistenceProvider" ref="persistenceProvider"/>
        <property name="jpaDialect" ref="jpaDialect" />
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter"/>
        <property name="packagesToScan" value="com.xie.springcase.hibernate.entity"/>
		<property name="jpaProperties">
			<props>
			    <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
			    <prop key="hibernate.connection.release_mode">auto</prop>
				<prop key="hibernate.autoReconnect">true</prop>
			    <prop key="hibernate.generate_statistics">false</prop><!-- 统计信息 -->
				<!-- <prop key="hibernate.use_sql_comments">true</prop> -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop><!-- 格式化SQL -->
                <!-- HikariCP
                <prop key="hibernate.connection.provider_class">com.zaxxer.hikari.hibernate.HikariConnectionProvider</prop>
                <prop key="hibernate.hikari.dataSourceClassName">${db.driverClass2}</prop>
                <prop key="hibernate.hikari.dataSource.url">${db.url}</prop>
                <prop key="hibernate.hikari.dataSource.user">${db.username}</prop>
                <prop key="hibernate.hikari.dataSource.password">${db.password}</prop>
                <prop key="hibernate.hikari.dataSource.cachePrepStmts">true</prop>
                <prop key="hibernate.hikari.dataSource.prepStmtCacheSize">250</prop>
                <prop key="hibernate.hikari.dataSource.prepStmtCacheSqlLimit">2048</prop>
                <prop key="hibernate.hikari.maximumPoolSize">15</prop>
                <prop key="hibernate.hikari.minimumIdle">20</prop>
                <prop key="hibernate.hikari.connectionTimeout">30000</prop>
                <prop key="hibernate.hikari.idleTimeout">600000</prop>
                <prop key="hibernate.hikari.maxLifetime">1800000</prop> -->
				<!-- ehcache -->
				<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="javax.persistence.sharedCache.mode">ENABLE_SELECTIVE</prop><!--若为ALL，则默认全部开启二级缓存 ，实体上的@cacheable都不用打-->
				<prop key="javax.persistence.validation.mode">none</prop>
			</props>
		</property>
    </bean>
	<jpa:repositories base-package="com.xie.springcase.jpa.dao" repository-impl-postfix="Impl"
		entity-manager-factory-ref="entityManagerFactory" transaction-manager-ref="jpaTransactionManager" />
	<!-- JPA end -->

	<!-- Transaction start -->
	<!-- hibernate4 事务代理
	<bean id="hiberateTransactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean> -->
	<!-- mybatis 事务代理
	<bean id="mybatisTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource_HikariCP"/>
	</bean> -->
	<!-- jpa 事务代理 -->
	<bean id="jpaTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	<tx:advice id="txAdvice" transaction-manager="jpaTransactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 配置AOP切面 -->
	<aop:config>
		<aop:pointcut id="tranObjects" expression="execution(* com.xie.springcase.service..*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="tranObjects" />
	</aop:config>
	<!-- 启用 annotation事务
    <tx:annotation-driven transaction-manager="jpaTransactionManager"/> -->
	<!-- Transaction end -->

	<!-- ehcache -->
	<bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation"><value>classpath:ehcache.xml</value></property>
		<property name="shared" value="true"/><!-- 由于hibernate也使用了Ehcache, 保证双方都使用同一个缓存管理器 -->
	</bean>
	<!-- 配置一个简单的缓存工厂bean对象
	<bean id="simpleCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
		<property name="cacheManager" ref="ehcacheManager" />
		<property name="cacheName" value="demoCache" />
	</bean> -->

	<!-- 通过component-scan自动装载Bean，简化配置
	<context:component-scan base-package="com.xie.springcase.script" /> -->

	<!-- 配置动态加载的Bean，基于Spring的Resource支持，可从网络或本地文件获取Groovy代码 -->
	<lang:groovy id="calculator" refresh-check-delay="2000" script-source="classpath:groovy/Calculator.groovy" />

	<aop:aspectj-autoproxy/>
	<bean id="logAspect" class="com.xie.springcase.aop.LogAspect"/>
	<!-- 配置业务数据日志切面 -->
	<aop:config>
		<aop:aspect ref="logAspect">
			<aop:pointcut id="datalogPointCut" expression="@annotation(com.xie.springcase.annotation.DataLog)"/>
			<aop:after pointcut-ref="datalogPointCut" method="doDateLog"/>
			<!--<aop:after-throwing pointcut-ref="datalogPointCut" method="doThrowing" throwing="ex"/>-->
		</aop:aspect>
	</aop:config>
	<!-- 配置系统日志切面 -->
	<aop:config>
		<aop:aspect ref="logAspect">
			<aop:pointcut id="syslogPointCut" expression="execution(* com.xie.springcase.service..*(..))"/>
			<aop:around pointcut-ref="syslogPointCut" method="doAround"/>
			<aop:after-throwing pointcut-ref="syslogPointCut" method="doThrowing" throwing="ex"/>
		</aop:aspect>
	</aop:config>
</beans>